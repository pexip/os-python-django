Description: fix denial of service via long passwords
Origin: based on password-dos.diff by Luke Faraone <lfaraone@debian.org>
Bug-Debian: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=723043
Bug-Ubuntu: https://bugs.launchpad.net/ubuntu/+source/python-django/+bug/1225784

Index: python-django-1.3.1/django/contrib/auth/forms.py
===================================================================
--- python-django-1.3.1.orig/django/contrib/auth/forms.py	2013-09-20 10:11:20.116087029 -0400
+++ python-django-1.3.1/django/contrib/auth/forms.py	2013-09-20 10:11:20.112087029 -0400
@@ -1,4 +1,4 @@
-from django.contrib.auth.models import User
+from django.contrib.auth.models import User, MAXIMUM_PASSWORD_LENGTH
 from django.contrib.auth import authenticate
 from django.contrib.auth.tokens import default_token_generator
 from django.contrib.sites.models import get_current_site
@@ -14,9 +14,9 @@
     username = forms.RegexField(label=_("Username"), max_length=30, regex=r'^[\w.@+-]+$',
         help_text = _("Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only."),
         error_messages = {'invalid': _("This value may contain only letters, numbers and @/./+/-/_ characters.")})
-    password1 = forms.CharField(label=_("Password"), widget=forms.PasswordInput)
+    password1 = forms.CharField(label=_("Password"), widget=forms.PasswordInput, max_length=MAXIMUM_PASSWORD_LENGTH)
     password2 = forms.CharField(label=_("Password confirmation"), widget=forms.PasswordInput,
-        help_text = _("Enter the same password as above, for verification."))
+        max_length=MAXIMUM_PASSWORD_LENGTH, help_text = _("Enter the same password as above, for verification."))
 
     class Meta:
         model = User
@@ -64,7 +64,11 @@
     username/password logins.
     """
     username = forms.CharField(label=_("Username"), max_length=30)
-    password = forms.CharField(label=_("Password"), widget=forms.PasswordInput)
+    password = forms.CharField(
+        label=_("Password"),
+        widget=forms.PasswordInput,
+        max_length=MAXIMUM_PASSWORD_LENGTH,
+    )
 
     def __init__(self, request=None, *args, **kwargs):
         """
@@ -151,8 +155,8 @@
     A form that lets a user change set his/her password without
     entering the old password
     """
-    new_password1 = forms.CharField(label=_("New password"), widget=forms.PasswordInput)
-    new_password2 = forms.CharField(label=_("New password confirmation"), widget=forms.PasswordInput)
+    new_password1 = forms.CharField(label=_("New password"), widget=forms.PasswordInput, max_length=MAXIMUM_PASSWORD_LENGTH)
+    new_password2 = forms.CharField(label=_("New password confirmation"), widget=forms.PasswordInput, max_length=MAXIMUM_PASSWORD_LENGTH)
 
     def __init__(self, user, *args, **kwargs):
         self.user = user
@@ -177,7 +181,7 @@
     A form that lets a user change his/her password by entering
     their old password.
     """
-    old_password = forms.CharField(label=_("Old password"), widget=forms.PasswordInput)
+    old_password = forms.CharField(label=_("Old password"), widget=forms.PasswordInput, max_length=MAXIMUM_PASSWORD_LENGTH)
 
     def clean_old_password(self):
         """
@@ -193,8 +197,8 @@
     """
     A form used to change the password of a user in the admin interface.
     """
-    password1 = forms.CharField(label=_("Password"), widget=forms.PasswordInput)
-    password2 = forms.CharField(label=_("Password (again)"), widget=forms.PasswordInput)
+    password1 = forms.CharField(label=_("Password"), widget=forms.PasswordInput, max_length=MAXIMUM_PASSWORD_LENGTH)
+    password2 = forms.CharField(label=_("Password (again)"), widget=forms.PasswordInput, max_length=MAXIMUM_PASSWORD_LENGTH)
 
     def __init__(self, user, *args, **kwargs):
         self.user = user
Index: python-django-1.3.1/django/contrib/auth/models.py
===================================================================
--- python-django-1.3.1.orig/django/contrib/auth/models.py	2013-09-20 10:11:20.116087029 -0400
+++ python-django-1.3.1/django/contrib/auth/models.py	2013-09-20 10:11:20.112087029 -0400
@@ -12,7 +12,7 @@
 from django.utils.translation import ugettext_lazy as _
 from django.utils.crypto import constant_time_compare
 
-
+MAXIMUM_PASSWORD_LENGTH = 4096  # The maximum length a password can be to prevent DoS
 UNUSABLE_PASSWORD = '!' # This will never be a valid hash
 
 def get_hexdigest(algorithm, salt, raw_password):
@@ -20,6 +20,9 @@
     Returns a string of the hexdigest of the given plaintext password and salt
     using the given algorithm ('md5', 'sha1' or 'crypt').
     """
+    if len(raw_password) > MAXIMUM_PASSWORD_LENGTH:
+        raise ValueError("Invalid password; Must be less than or equal"
+                         " to %d bytes" % MAXIMUM_PASSWORD_LENGTH)
     raw_password, salt = smart_str(raw_password), smart_str(salt)
     if algorithm == 'crypt':
         try:
Index: python-django-1.3.1/django/contrib/auth/tests/basic.py
===================================================================
--- python-django-1.3.1.orig/django/contrib/auth/tests/basic.py	2013-09-20 10:11:20.116087029 -0400
+++ python-django-1.3.1/django/contrib/auth/tests/basic.py	2013-09-20 10:14:55.044081114 -0400
@@ -20,6 +20,7 @@
         self.assertTrue(u.check_password('testpw'))
         u.set_password(None)
         self.assertFalse(u.has_usable_password())
+        self.assertRaises(ValueError, u.set_password, ("a"*4100))
 
         # Check authentication/permissions
         self.assertTrue(u.is_authenticated())
