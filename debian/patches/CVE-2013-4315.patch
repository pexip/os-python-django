Description: fix directory traversal with ssi template tag
Origin: backport, https://github.com/django/django/commit/87d2750b39f6f2d54b7047225521a44dcd37e896
Origin: backport, https://github.com/django/django/commit/3203f684e8e51cbfa1b39d7b6a56e340981ad4d5
Bug-Debian: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=722605

Index: python-django-1.3.1/django/template/defaulttags.py
===================================================================
--- python-django-1.3.1.orig/django/template/defaulttags.py	2013-09-20 09:19:00.000173442 -0400
+++ python-django-1.3.1/django/template/defaulttags.py	2013-09-20 09:18:59.992173442 -0400
@@ -1,5 +1,6 @@
 """Default tags used by the template system, available to all templates."""
 
+import os
 import sys
 import re
 from itertools import groupby, cycle as itertools_cycle
@@ -333,6 +334,7 @@
         return ''
 
 def include_is_allowed(filepath):
+    filepath = os.path.abspath(filepath)
     for root in settings.ALLOWED_INCLUDE_ROOTS:
         if filepath.startswith(root):
             return True
Index: python-django-1.3.1/tests/regressiontests/templates/tests.py
===================================================================
--- python-django-1.3.1.orig/tests/regressiontests/templates/tests.py	2013-09-20 09:19:00.000173442 -0400
+++ python-django-1.3.1/tests/regressiontests/templates/tests.py	2013-09-20 09:20:20.236171234 -0400
@@ -1642,6 +1642,37 @@
         settings.INSTALLED_APPS = ('tagsegg',)
         t = template.Template(ttext)
 
+@unittest.skipIf(' ' in __file__,
+    "The {%% ssi %%} tag in Django 1.4 doesn't support spaces in path.")
+class SSITests(unittest.TestCase):
+    def setUp(self):
+        self.this_dir = os.path.dirname(os.path.abspath(__file__))
+        self.ssi_dir = os.path.join(self.this_dir, "templates", "first")
+
+    def render_ssi(self, path):
+        # the path must exist for the test to be reliable
+        self.assertTrue(os.path.exists(path))
+        return template.Template('{%% ssi %s %%}' % path).render(Context())
+
+    def test_allowed_paths(self):
+        acceptable_path = os.path.join(self.ssi_dir, "..", "first", "test.html")
+        settings.ALLOWED_INCLUDE_ROOTS=(self.ssi_dir,)
+        self.assertEqual(self.render_ssi(acceptable_path), 'First template\n')
+
+    def test_relative_include_exploit(self):
+        """
+        May not bypass ALLOWED_INCLUDE_ROOTS with relative paths
+
+        e.g. if ALLOWED_INCLUDE_ROOTS = ("/var/www",), it should not be
+        possible to do {% ssi "/var/www/../../etc/passwd" %}
+        """
+        disallowed_paths = [
+            os.path.join(self.ssi_dir, "..", "ssi_include.html"),
+            os.path.join(self.ssi_dir, "..", "second", "test.html"),
+        ]
+        settings.ALLOWED_INCLUDE_ROOTS=(self.ssi_dir,)
+        for path in disallowed_paths:
+            self.assertEqual(self.render_ssi(path), '')
 
 class RequestContextTests(BaseTemplateResponseTest):
 
